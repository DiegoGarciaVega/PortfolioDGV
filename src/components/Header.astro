---
import ThemeToggle from "./ThemeToggle.astro"
// const navItems = [
//   {
//     title: "Inicio",
//     label: "inicio",
//     url: "/",
//   },
//   {
//     title: "Experiencia",
//     label: "experiencia",
//     url: "/#experiencia",
//   },
//   {
//     title: "Educación",
//     label: "educacion",
//     url: "/#educacion",
//   },
//   {
//     title: "Proyectos",
//     label: "proyectos",
//     url: "/#proyectos",
//   },
//   {
//     title: "Sobre mí",
//     label: "sobre-mi",
//     url: "/#sobre-mi",
//   }
// ]

const navItems = [
  {
    title: "Inicio",
    label: "inicio",
    url: import.meta.env.BASE_URL + "/",
  },
  {
    title: "Experiencia",
    label: "experiencia",
    url: import.meta.env.BASE_URL + "/#experiencia",
  },
  {
    title: "Educación",
    label: "educacion",
    url: import.meta.env.BASE_URL + "/#educacion",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: import.meta.env.BASE_URL + "/#proyectos",
  },
  {
    title: "Sobre mí",
    label: "sobre-mi",
    url: import.meta.env.BASE_URL + "/#sobre-mi",
  }
]
---
<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    <!-- Mobile menu button -->
    <button
      id="mobile-toggle-btn"
      class="md:hidden flex items-center px-3 py-2 text-gray-600 dark:text-gray-200 hover:text-blue-500 dark:hover:text-blue-500"
      aria-label="Toggle menu"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>

    <!-- Desktop Navigation -->
    <div class="hidden md:flex md:flex-row md:items-center">
      {
        navItems.map((link) => (
          <a
            class="desktop-link relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
            { ...(link.label === "cv" ? { target: "_blank", rel: "noopener noreferrer" } : {}) }
          >
            {link.title}
          </a>
        ))
      }
    </div>
   
    <ThemeToggle />
  </nav>
</header>

<!-- Separate Mobile Menu (outside the nav element) -->
<div id="mobile-menu" class="fixed top-14 left-0 right-0 hidden z-20 mx-auto w-4/5 max-w-sm bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 md:hidden">
  <div class="flex flex-col w-full">
    {navItems.map((link) => (
      <a
        class="mobile-link block w-full px-4 py-2 text-center transition hover:text-blue-500 dark:hover:text-blue-500 border-b border-gray-100 dark:border-gray-700 last:border-0 text-gray-600 dark:text-gray-200"
        aria-label={link.label}
        href={link.url}
        { ...(link.label === "cv" ? { target: "_blank", rel: "noopener noreferrer" } : {}) }
      >
        {link.title}
      </a>
    ))}
  </div>
</div>

<script>
  document.addEventListener("astro:page-load", () => {
    console.log("Page loaded, setting up mobile menu");
    
    const toggleBtn = document.getElementById("mobile-toggle-btn");
    const mobileMenu = document.getElementById("mobile-menu");
    
    if (toggleBtn && mobileMenu) {
      // Log to verify elements are found
      console.log("Found toggle button and mobile menu");
      
      // Add toggle functionality
      toggleBtn.addEventListener("click", (e) => {
        console.log("Toggle button clicked");
        e.preventDefault();
        e.stopPropagation();
        mobileMenu.classList.toggle("hidden");
      });
      
      // Close menu when clicking outside
      document.addEventListener("click", (e) => {
        if (!toggleBtn.contains(e.target) && !mobileMenu.contains(e.target)) {
          mobileMenu.classList.add("hidden");
        }
      });
      
      // Close menu when a link is clicked
      const mobileLinks = mobileMenu.querySelectorAll(".mobile-link");
      mobileLinks.forEach(link => {
        link.addEventListener("click", () => {
          mobileMenu.classList.add("hidden");
        });
      });
    } else {
      console.log("Failed to find toggle button or mobile menu");
    }
    
    // Section highlighting logic (from your original code)
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll(".desktop-link, .mobile-link");
    
    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };
    
    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });
    
    sections.forEach((section) => {
      observer.observe(section);
    });
    
    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }
  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }
  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }

  #mobile-menu {
    @apply backdrop-blur dark:bg-gray-800/95 bg-white/95;
  }
</style>